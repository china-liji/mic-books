(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{425:function(n,e,a){"use strict";a.r(e),a.d(e,"watcherDemo",(function(){return T}));var t=a(0),S=a.n(t),o=a(172),r=a(176),E=a.n(r);var T=new(a(74).a)([],(function(){return S.a.createElement("div",null,S.a.createElement(o.Inspector,{name:"Rexjs.TagClass",value:E.a.TagClass.prototype}))}));e.default="### 描述\n`TagClass` - `标签性质类别`，其中包括“`无`”、“`表达式`”、“`表达式上下文`”、“`语句`”、“`语句起始`”以及“`语句结束`”。\n\n### 观察\n```inline-demo\nimport(watcherDemo);\n```\n\n### 静态属性\n* `CLASS_NONE`: *number* - 无类别。\n* `CLASS_STATEMENT`: *number* - 语句标签类别，一般不直接设置，而是用于判断“继承”关系。\n* `CLASS_STATEMENT_BEGIN`: *number* - 语句起始标签类别，“继承”至 `CLASS_STATEMENT`。\n* `CLASS_STATEMENT_END`: *number* - 语句结束标签类别，“继承”至 `CLASS_STATEMENT`。\n* `CLASS_EXPRESSION`: *number* - 表达式标签类别，“继承”至 `CLASS_STATEMENT_BEGIN`，因为每一个表达式都可以作为语句的开始。\n* `CLASS_EXPRESSION_CONTEXT`: *number* - 表达式上下文标签类别。\n\n### 属性\n* `expression`: *booelan* - 是否为表达式标签类别。\n* `expressionContext`: `booelan` - 是否为表达式上下文标签类别。\n* `statement`: *booelan* - 是否为语句标签类别。\n* `statementBegin`: *booelan* - 是否为语句起始标签类别。\n* `statementEnd`: *booelan* - 是否为语句结束标签类别。\n\n### 更多内容\n* [SyntaxTag](#/rexjs/syntax-tag)"}}]);