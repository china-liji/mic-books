{"version":3,"sources":["webpack:///./src/components/code-previewer/file.ts","webpack:///./demos/hooks/use-has-changed.js?3d5e","webpack:///./demos/hooks/index.ts","webpack:///./demos/hooks/use-update-times.js?6132","webpack:///./demos/hooks/use-update-times.js","webpack:///./demos/react/hooks/use-callback/interface-demo","webpack:///./demos/react/memo/update-demo/child.jsx","webpack:///./demos/react/memo/index.tsx","webpack:///./demos/react/memo/update-demo/index.jsx?c2d6","webpack:///./demos/react/memo/update-demo/child.jsx?ddc2","webpack:///./demos/react/memo/update-demo/index.jsx","webpack:///./demos/react/hooks/use-callback/index.ts","webpack:///./demos/react/hooks/use-callback/interface-demo/index.d.ts","webpack:///./demos/react/hooks/use-callback/deps-demo/index.jsx?85fa","webpack:///./demos/react/hooks/use-callback/deps-demo/index.jsx","webpack:///./demos/react/hooks/use-callback/inline-func-demo/index.jsx?9478","webpack:///./demos/react/hooks/use-callback/inline-func-demo/index.jsx","webpack:///./demos/react/hooks/use-callback/outer-func-demo/index.jsx","webpack:///./demos/react/hooks/use-callback/outer-func-demo/locale.js","webpack:///./demos/react/hooks/use-callback/dep-by-sub-demo/index.jsx","webpack:///./demos/react/hooks/use-callback/dep-by-sub-demo/sub.jsx","webpack:///./demos/react/hooks/use-callback/readme.md"],"names":["name","source","type","this","result","exec","fileOfUseHasChanged","fileOfUseUpdateTimes","ref","current","Math","random","ChildDemoWithMemo","memo","title","getContent","date","updateTimes","toLocaleTimeString","updateDemo","getContentInlineFunc","Date","setDate","times","onClick","interfaceDemo","depsDemo","changeableDeps","setChangeableDeps","getTimes","inlineFuncDemo","getTimesWithUseCallback","outerFuncDemo","depBySubDemo"],"mappings":"0FAAA,wCAOE,SAAYA,EAAcC,EAAgBC,GAIxC,GAHAC,KAAKH,KAAOA,EACZG,KAAKF,OAASA,GAETC,EAAM,CACT,IAAME,EAAS,gCAAgCC,KAAKF,KAAKH,MAEzDE,EAAOE,EAASA,EAAO,GAAK,GAG9BD,KAAKD,KAAOA,I,iCCjBD,wO,2HCIFI,EAAsB,IAAI,IAAK,qBAAsB,KAErDC,EAAuB,IAAI,IAAK,sBCN9B,4d,iCCAf,WAEe,eACb,IAAMC,EAAM,iBAAO,GAgBnB,OAJA,qBAAU,WACRA,EAAIC,YACH,CAACC,KAAKC,WAEFH,EAAIC,U,wTCnBE,I,2ECoBR,IAAMG,EAAoB,IAAMC,MAlBhC,SAAmB,G,IAAEC,EAAK,QAAEC,EAAU,aAAEC,EAAI,OAC3CC,EAAc,iBAAO,GAI3B,OAFAA,EAAYR,UAGV,6BACGK,EACD,6B,YACS,8BAAOG,EAAYR,SAC5B,yC,SACOO,EAAKE,qBACZ,6B,iBACc,8BAAOH,KAAoB,yCCRxC,IAAMI,EAAa,IAAI,IAC5B,CACE,IAAI,IAAK,YCTE,w1CDUX,IAAI,IAAK,YEVE,8eFWX,MGLG,WACL,IAAIC,EACE,EAAkB,mBAAS,IAAIC,MAA9BL,EAAI,KAAEM,EAAO,KACdC,EAAQ,cAQRR,EAAa,sBACjBK,EAAuB,WACrB,OAAOG,GAET,CAACP,IAGH,OACE,6BACE,2BACE,kBAAC,IAAM,CAACQ,QAhBQ,WACpBF,EACE,IAAID,Q,QAcmC,wCAEvC,6BACA,kBAACT,EAAiB,CAChBE,MACE,oCACE,4C,+BAGJE,KAAMA,EACND,WAAYA,IAEd,6BACA,kBAACH,EAAiB,CAChBE,MACE,oC,gBAAe,uCAEjBE,KAAMA,EACND,WAAYK,IAEd,6BACA,kBAACR,EAAiB,CAChBE,MACE,oC,4BAC2B,8CAG7BE,KAAMA,EACND,WAAYA,QHzClB,GIGWU,EAAgB,IAAI,IAC/B,CACE,IAAI,IAAK,aNnBE,0PMmB+B,MAC1C,IAAI,IAAK,aCpBE,wSDoB+B,QAIjCC,EAAW,IAAI,IAC1B,CACE,IAAI,IAAK,YE1BE,8hCF2BX,MGvBG,WACC,MAAsC,oBAAS,GAA9CC,EAAc,KAAEC,EAAiB,KAClCL,EAAQ,cAERM,EAAW,uBACf,WACE,OAAON,IAGTI,EAAiB,CAACJ,GAAS,CAAC,OAO9B,OACE,6BACE,2B,oBACmB,8B,IAAQI,EAAiB,QAAU,O,WAEtD,6BACA,2B,WACU,8BAAOE,KACf,6BACEF,EACE,yCACA,4CAGN,2BACE,kBAAC,IAAM,CAACH,QAnBQ,WACpBI,GAAmBD,KAmBZA,EAAiB,KAAO,K,gBHNjC,GAGWG,EAAiB,IAAI,IAChC,CACE,IAAI,IAAK,YInCE,iuBJoCX,MKjCG,WACL,IAAID,EACEN,EAAQ,cAERQ,EAA0B,sBAE9BF,EAAW,WACT,OAAON,GAGT,IAGF,OACE,6BACE,2BACE,mC,YAAoB,8BAAOM,KAC3B,0DAEF,2BACE,0C,YAA2B,8BAAOE,KAClC,0FLeN,GAGWC,EAAgB,IAAI,IAAK,CACpC,IAAI,IAAK,YM3CI,gQN4Cb,IAAI,IAAK,YO5CI,mKP+CFC,EAAe,IAAI,IAAK,CACnC,IAAI,IAAK,YQhDI,2bRiDb,IAAI,IAAK,USjDI,+PTkDb,MAGa,UUrDA","file":"js/3.boundle.js","sourcesContent":["export class File {\n  name: string;\n\n  source: string;\n\n  type: string;\n  \n  constructor(name: string, source: string, type?: string) {\n    this.name = name;\n    this.source = source;\n\n    if (!type) {\n      const result = /\\.([^/\\\\.]+?)(?=(?:[?#].*)?$)/.exec(this.name);\n\n      type = result ? result[1] : '';\n    }\n\n    this.type = type;\n  }\n}","export default \"import { useRef } from 'react';\\n\\nexport default (value) => {\\n  const ref = useRef(value);\\n  // 进行对比，记录对比结果\\n  const result = ref.current !== value;\\n\\n  // 记录当前值\\n  ref.current = value;\\n  // 返回对比结果\\n  return result;\\n};\";","import { File } from '@/src/components/code-previewer/file';\nimport useHasChangedSource from './use-has-changed?txt';\nimport useUpdateTimesSource from './use-update-times?txt';\n\nexport const fileOfUseHasChanged = new File('use-has-changed.js', useHasChangedSource);\n\nexport const fileOfUseUpdateTimes = new File('use-update-times.js', useUpdateTimesSource);","export default \"import { useRef, useEffect } from 'react';\\n\\nexport default () => {\\n  const ref = useRef(1);\\n\\n  /**\\n   * 不能直接使用 return ++ref.current，\\n   * 因为在某些情况下，进了渲染函数，不代表组件会被更新，比如：\\n   * const [num, setNum] = useState(0);\\n   * ...\\n   * setNum(1); setNum(2); setNum(0);\\n   * 连续的 setNum，最后 num 还是等于 0，并未变化，\\n   * 这会导致进入组件的渲染函数，但其实组件不会被更新。\\n   * 所以，利用 useEffect 才能表明组件是否被更新。\\n   */\\n  useEffect(() => {\\n    ref.current++;\\n  }, [Math.random()]);\\n  \\n  return ref.current;\\n};\";","import { useRef, useEffect } from 'react';\n\nexport default () => {\n  const ref = useRef(1);\n\n  /**\n   * 不能直接使用 return ++ref.current，\n   * 因为在某些情况下，进了渲染函数，不代表组件会被更新，比如：\n   * const [num, setNum] = useState(0);\n   * ...\n   * setNum(1); setNum(2); setNum(0);\n   * 连续的 setNum，最后 num 还是等于 0，并未变化，\n   * 这会导致进入组件的渲染函数，但其实组件不会被更新。\n   * 所以，利用 useEffect 才能表明组件是否被更新。\n   */\n  useEffect(() => {\n    ref.current++;\n  }, [Math.random()]);\n  \n  return ref.current;\n};","export default \"/**\\n * useCallback 将会根据参数 callback 来返回一个记忆化版本的 callback；它只会在依赖项 deps 发生变化时，才会更新、改变。\\n * @param {Function} callback 需要记忆化的回调函数\\n * @param {unknown[]} deps 更新依赖\\n * @returns {Function} 一个记忆化版本的 callback\\n */\\nfunction useCallback(callback, deps) {}\";","import React, { useRef } from 'react';\n\nexport function ChildDemo({ title, getContent, date }) {\n  const updateTimes = useRef(0);\n  \n  updateTimes.current++;\n\n  return (\n    <div>\n      {title}\n      <br />\n      子组件更新次数: <span>{updateTimes.current}</span>\n      <hr data-mini />\n      date: {date.toLocaleTimeString()}\n      <br />\n      getContent(): <span>{getContent()}</span><sub>刷新标识</sub>\n    </div>\n  );\n}\n\nexport const ChildDemoWithMemo = React.memo(ChildDemo);","import updateDemoSource from './update-demo/index?txt';\nimport ChildDemoSource from './update-demo/child?txt';\nimport { Demo } from '@/src/components/code-previewer/demo';\nimport { File } from '@/src/components/code-previewer/file';\nimport { UpdateDemo } from './update-demo';\nimport { fileOfUseUpdateTimes } from '@/demos/hooks';\n\nexport const updateDemo = new Demo(\n  [\n    new File('index.jsx', updateDemoSource),\n    new File('child.jsx', ChildDemoSource),\n    fileOfUseUpdateTimes,\n  ],\n  UpdateDemo,\n  true\n);","export default \"import React, { useState, useCallback } from 'react';\\nimport { ChildDemoWithMemo } from './child';\\nimport { ChildDemoProps } from './types';\\nimport useUpdateTimes from '@/demos/hooks/use-update-times';\\nimport { Button } from 'antd';\\n\\nexport function UpdateDemo() {\\n  let getContentInlineFunc;\\n  const [date, setDate] = useState(new Date());\\n  const times = useUpdateTimes();\\n\\n  const onButtonClick = () => {\\n    setDate(\\n      new Date()\\n    );\\n  };\\n\\n  const getContent = useCallback(\\n    getContentInlineFunc = () => {\\n      return times;\\n    },\\n    [date]\\n  );\\n\\n  return (\\n    <div>\\n      <p>\\n        <Button onClick={onButtonClick}>点击刷新 <span>date</span></Button>\\n      </p>\\n      <hr />\\n      <ChildDemoWithMemo\\n        title={\\n          <>\\n            <span>React.memo</span> + useCallback(..., [date])\\n          </>\\n        }\\n        date={date}\\n        getContent={getContent}\\n      />\\n      <hr />\\n      <ChildDemoWithMemo\\n        title={\\n          <>React.memo + <span>内联函数</span></>\\n        }\\n        date={date}\\n        getContent={getContentInlineFunc}\\n      />\\n      <hr />\\n      <ChildDemoWithMemo\\n        title={\\n          <>\\n            useCallback(..., [date]) <del>+ React.memo</del> \\n          </>\\n        }\\n        date={date}\\n        getContent={getContent}\\n      />\\n    </div>\\n  );\\n}\";","export default \"import React, { useRef } from 'react';\\n\\nexport function ChildDemo({ title, getContent, date }) {\\n  const updateTimes = useRef(0);\\n  \\n  updateTimes.current++;\\n\\n  return (\\n    <div>\\n      {title}\\n      <br />\\n      子组件更新次数: <span>{updateTimes.current}</span>\\n      <hr data-mini />\\n      date: {date.toLocaleTimeString()}\\n      <br />\\n      getContent(): <span>{getContent()}</span><sub>刷新标识</sub>\\n    </div>\\n  );\\n}\\n\\nexport const ChildDemoWithMemo = React.memo(ChildDemo);\";","import React, { useState, useCallback } from 'react';\nimport { ChildDemoWithMemo } from './child';\nimport { ChildDemoProps } from './types';\nimport useUpdateTimes from '@/demos/hooks/use-update-times';\nimport { Button } from 'antd';\n\nexport function UpdateDemo() {\n  let getContentInlineFunc;\n  const [date, setDate] = useState(new Date());\n  const times = useUpdateTimes();\n\n  const onButtonClick = () => {\n    setDate(\n      new Date()\n    );\n  };\n\n  const getContent = useCallback(\n    getContentInlineFunc = () => {\n      return times;\n    },\n    [date]\n  );\n\n  return (\n    <div>\n      <p>\n        <Button onClick={onButtonClick}>点击刷新 <span>date</span></Button>\n      </p>\n      <hr />\n      <ChildDemoWithMemo\n        title={\n          <>\n            <span>React.memo</span> + useCallback(..., [date])\n          </>\n        }\n        date={date}\n        getContent={getContent}\n      />\n      <hr />\n      <ChildDemoWithMemo\n        title={\n          <>React.memo + <span>内联函数</span></>\n        }\n        date={date}\n        getContent={getContentInlineFunc}\n      />\n      <hr />\n      <ChildDemoWithMemo\n        title={\n          <>\n            useCallback(..., [date]) <del>+ React.memo</del> \n          </>\n        }\n        date={date}\n        getContent={getContent}\n      />\n    </div>\n  );\n}","import interfaceJsSource from './interface-demo/index?txt';\nimport interfaceTsSource from './interface-demo/index.d?txt';\nimport depsDemoSource from './deps-demo?txt';\nimport inlineFuncDemoSource from './inline-func-demo?txt';\nimport outerFuncDemoSource from './outer-func-demo?txt';\nimport outerFuncDemoLocaleSource from './outer-func-demo/locale?txt';\nimport depBySubDemoSource from './dep-by-sub-demo?txt';\nimport depBySubDemoSubSource from './dep-by-sub-demo/sub?txt';\nimport markdown from './readme.md';\nimport { DepsDemo } from './deps-demo';\nimport { Demo } from '@/src/components/code-previewer/demo';\nimport { File } from '@/src/components/code-previewer/file';\nimport { InlineFuncDemo } from './inline-func-demo';\nimport { fileOfUseUpdateTimes } from '@/demos/hooks';\n\nexport { updateDemo as memoUpdateDemo } from '../../memo';\n\nexport const interfaceDemo = new Demo(\n  [\n    new File('JavaScript', interfaceJsSource, 'js'),\n    new File('TypeScript', interfaceTsSource, 'ts'),\n  ]\n);\n\nexport const depsDemo = new Demo(\n  [\n    new File('index.jsx', depsDemoSource),\n    fileOfUseUpdateTimes,\n  ],\n  DepsDemo,\n  true\n);\n\nexport const inlineFuncDemo = new Demo(\n  [\n    new File('index.jsx', inlineFuncDemoSource),\n    fileOfUseUpdateTimes,\n  ],\n  InlineFuncDemo,\n  true\n);\n\nexport const outerFuncDemo = new Demo([\n  new File('index.jsx', outerFuncDemoSource),\n  new File('locale.js', outerFuncDemoLocaleSource),\n]);\n\nexport const depBySubDemo = new Demo([\n  new File('index.jsx', depBySubDemoSource),\n  new File('sub.jsx', depBySubDemoSubSource),\n  fileOfUseUpdateTimes,\n]);\n\nexport default markdown;","export default \"interface useCallback {\\n  /**\\n   * useCallback 将会根据参数 callback 来返回一个记忆化版本的 callback；它只会在依赖项 deps 发生变化时，才会更新、改变。\\n   * @param callback 需要记忆化的回调函数\\n   * @param deps 更新依赖\\n   * @returns 一个记忆化版本的 callback\\n   */\\n  <T extends (...args: unknown[]) => unknown>(callback: T, deps: unknown[]): T;\\n}\";","export default \"import React, { useState, useCallback } from 'react';\\nimport useUpdateTimes from '@/demos/hooks/use-update-times';\\nimport { Button } from 'antd';\\n\\nexport function DepsDemo() {\\n  const [changeableDeps, setChangeableDeps] = useState(true);\\n  const times = useUpdateTimes();\\n\\n  const getTimes = useCallback(\\n    () => {\\n      return times;\\n    },\\n    // 这里得保持 deps 的个数一致，所以是 [null]\\n    changeableDeps ? [times] : [null]\\n  );\\n\\n  const onButtonClick = () => {\\n    setChangeableDeps(!changeableDeps);\\n  };\\n\\n  return (\\n    <div>\\n      <p>\\n        useCallback(..., <span>[{changeableDeps ? 'times' : 'null'}]</span>);\\n      </p>\\n      <hr />\\n      <p>\\n        每秒执行结果: <span>{getTimes()}</span>\\n        <sub>{\\n          changeableDeps ?\\n            '每次结果都不同，说明 useCallback 在随着 deps 的变化而更新' :\\n            'deps 固定为 [null]，useCallback 不会更新，结果不再变化'\\n        }</sub>\\n      </p>\\n      <p>\\n        <Button onClick={onButtonClick}>\\n          {changeableDeps ? '移除' : '设置'}动态 deps\\n        </Button>\\n      </p>\\n    </div>\\n  );\\n}\";","import React, { useState, useCallback } from 'react';\nimport useUpdateTimes from '@/demos/hooks/use-update-times';\nimport { Button } from 'antd';\n\nexport function DepsDemo() {\n  const [changeableDeps, setChangeableDeps] = useState(true);\n  const times = useUpdateTimes();\n\n  const getTimes = useCallback(\n    () => {\n      return times;\n    },\n    // 这里得保持 deps 的个数一致，所以是 [null]\n    changeableDeps ? [times] : [null]\n  );\n\n  const onButtonClick = () => {\n    setChangeableDeps(!changeableDeps);\n  };\n\n  return (\n    <div>\n      <p>\n        useCallback(..., <span>[{changeableDeps ? 'times' : 'null'}]</span>);\n      </p>\n      <hr />\n      <p>\n        每秒执行结果: <span>{getTimes()}</span>\n        <sub>{\n          changeableDeps ?\n            '每次结果都不同，说明 useCallback 在随着 deps 的变化而更新' :\n            'deps 固定为 [null]，useCallback 不会更新，结果不再变化'\n        }</sub>\n      </p>\n      <p>\n        <Button onClick={onButtonClick}>\n          {changeableDeps ? '移除' : '设置'}动态 deps\n        </Button>\n      </p>\n    </div>\n  );\n}","export default \"import React, { useCallback } from 'react';\\nimport useUpdateTimes from '@/demos/hooks/use-update-times';\\n\\nexport function InlineFuncDemo() {\\n  let getTimes;\\n  const times = useUpdateTimes();\\n\\n  const getTimesWithUseCallback = useCallback(\\n    // 这里每次都会生成一个新的函数，所以每次不同的 times 都会被闭包于函数内\\n    getTimes = () => {\\n      return times;\\n    },\\n    // 这里没有依赖，所以 callback 不会刷新\\n    []\\n  );\\n\\n  return (\\n    <div>\\n      <p>\\n        <b>内联函数</b> 每秒执行结果: <span>{getTimes()}</span>\\n        <sub>每次结果都不同，说明内联函数随组件刷新而重新生成</sub>\\n      </p>\\n      <p>\\n        <b>useCallback</b> 每秒执行结果: <span>{getTimesWithUseCallback()}</span>\\n        <sub>无论内联函数生成多少次，只要 deps 不发生变化，useCallback 就不会更新，所以结果永远一致</sub>\\n      </p>\\n    </div>\\n  );\\n}\";","import React, { useCallback } from 'react';\nimport useUpdateTimes from '@/demos/hooks/use-update-times';\n\nexport function InlineFuncDemo() {\n  let getTimes;\n  const times = useUpdateTimes();\n\n  const getTimesWithUseCallback = useCallback(\n    // 这里每次都会生成一个新的函数，所以每次不同的 times 都会被闭包于函数内\n    getTimes = () => {\n      return times;\n    },\n    // 这里没有依赖，所以 callback 不会刷新\n    []\n  );\n\n  return (\n    <div>\n      <p>\n        <b>内联函数</b> 每秒执行结果: <span>{getTimes()}</span>\n        <sub>每次结果都不同，说明内联函数随组件刷新而重新生成</sub>\n      </p>\n      <p>\n        <b>useCallback</b> 每秒执行结果: <span>{getTimesWithUseCallback()}</span>\n        <sub>无论内联函数生成多少次，只要 deps 不发生变化，useCallback 就不会更新，所以结果永远一致</sub>\n      </p>\n    </div>\n  );\n}","export default \"import React, { useCallback } from 'react';\\nimport { saveInput } from './locale';\\n\\nexport function OuterFuncDemo() {\\n  // 引入外部函数，避免每次都临时创建内联函数\\n  const onChange = useCallback(saveInput, []);\\n\\n  return (\\n    <input onChange={onChange} />\\n  );\\n}\";","export default \"export function saveInput({ target }) {\\n  const http = new XMLHttpRequest();\\n\\n  http.open('GET', `/a/b/c?input=${target.value}`, true);\\n  http.send();\\n}\";","export default \"import React, { useCallback } from 'react';\\nimport { Sub } from './sub';\\nimport useUpdateTimes from '@/demos/hooks/use-update-times';\\n\\nexport function DepBySubDemo() {\\n  const times = useUpdateTimes();\\n\\n  // 在某些特殊情况下，需要监听子组件的注销事件，你可能会如下使用\\n  const onSubUnmount = useCallback(() => {\\n    console.log(`子组件在 times=${times} 时，被注销。`);\\n  }, [times]);\\n\\n  return (\\n    <div>\\n      <Sub onUnmount={onSubUnmount} />\\n    </div>\\n  );\\n}\";","export default \"import React, { useEffect } from 'react';\\n\\nexport function Sub({ onUnmount }) {\\n  // 将 onUnmount 加入依赖，以便对最新的 onUnmount 函数进行调用\\n  useEffect(() => {\\n    // 当组件被注销，此函数会被调用\\n    return onUnmount;\\n  }, [onUnmount]);\\n\\n  return (\\n    <div />\\n  );\\n}\";","export default \"### 描述\\n`useCallback` 将会根据参数 `callback` 来返回一个记忆化版本的 `callback`，它只会在依赖项 `deps` 发生变化时，才会更新、改变。\\n\\n### 文档释义\\n```demo\\nimport(interfaceDemo);\\n```\\n\\n### 基础调用\\n```js\\nconst cb = useCallback(callback, deps);\\nconst cb1 = useCallback(() => {}, []);\\nconst cb2 = useCallback(() => {}, [dep1, dep2]);\\n```\\n\\n### 更新机制\\n只有当 `依赖项（deps）` 发生变化时，`useCallback` 才会更新。\\n```demo\\nimport(depsDemo);\\n```\\n注意事项：\\n\\n1. 函数内部所引用的 `外部变量`，多数情况下都需要加入 `deps` 中，如上例中的变量 `times`；因为是记忆化的函数，如果没有加入 `deps`，那么函数的 `变量引用`，不会随 `外部变量` 的更新而更新，直到下一次 `useCallback` 的更新；\\n2. 在 `deps` 频繁更新的情况下，**不建议**使用 `useCallback`，否则依赖判断机制及函数更新会造成更多的性能消耗。\\n\\n### 内联函数\\n\\n使用 `useCallback`，其 `内联函数` 依然会随组件的每次更新而创建，这是一个 `耗性能` 的行为。\\n```demo\\nimport(inlineFuncDemo);\\n```\\n\\n针对优化这个 `耗性能` 问题，可以将 `非关联上下文` 的内联函数，提取到 `组件外部` 或 `其他文件` 中，这样不仅能优化性能，还能将部分逻辑代码分离，使代码更简单、整洁。\\n```demo\\nimport(outerFuncDemo);\\n```\\n\\n### 有效场景\\n* `useCallback` 函数被子组件 `deps` 所依赖，即子组件需根据该函数的更新，从而进行某些特定操作。\\n```demo\\nimport(depBySubDemo);\\n```\\n\\n* 配合 `React.memo` 使用，以避免子组件随父组件的频繁刷新；类似 `React.Component` 的 `shouldComponentUpdate` 机制。\\n```demo\\nimport(memoUpdateDemo);\\n```\";"],"sourceRoot":""}