(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{422:function(n,t,a){"use strict";a.r(t),a.d(t,"resultDemo",(function(){return o}));var e=a(0),r=a.n(e),s=a(172),v=a(179),x=a.n(v);var o=new(a(74).a)([],(function(){var n=Object(e.useMemo)((function(){var n=new x.a.ECMAScriptParser;return n.parse(new x.a.File("index.js","var a = 1")),n}),[]);return r.a.createElement(s.Inspector,{name:"globalStatements",value:n.statements,defaultExpand:!0})}),!1,!0);t.default="### 描述\n语法树，它是构建整个文档的基础，也管理着整个文档的关系网。它就像房屋的墙壁和脊梁柱，如果没有它们，就算你有再多的豪华家私，也毫无用武之地。\n\n### 源码示例\n这里是一段 `JavaScript` 代码：\n```js\nvar a = 1;\n```\n接下来，我们将以此段代码为例，查看其 `文档结构`，并构建与其相关的、不同形式的 `语法树`，以供大家参考。\n\n### 文档结构\n我们先观察一下上述代码的 `文档结构`，以便更好的理解后续构建的 `语法树`：\n```txt\n ┌------------------------------------ 全局语句块\n┌┴---------------------------------┐\n| -┬-                              |\n|  ├---------------------------------- 文件起始语句\n|  |                               |\n|  └---------------------------------- 文件起始表达式\n|    ...                           |\n|    -┬-                           |\n|     └------------------------------- 其他语句\n|                                  |\n|       ┌----------------------------- var 语句\n|    ┌--┴---------------------┐    |\n|    |       var a = 1;       |    |\n|    |       -┬-------        |    |\n|    |        └----------------------- var 表达式\n|    |       var              |    |\n|    |       -┬-              |    |\n|    |        └----------------------- var 关键字\n|    |           a = 1        |    |\n|    |           —┬———        |    |\n|    |            └------------------- 二元运算表达式\n|    |             =          |    |\n|    |             └------------------ 二元运算符\n|    |           a            |    |\n|    |           └-------------------- 标识符表达式\n|    |               1        |    |\n|    |               └---------------- 字面量表达式\n|    └------------------------┘    |\n|    ...                           |\n|    -┬-                           |\n|     └------------------------------- 其他语句\n| -┬-                              |\n|  ├---------------------------------- 文件结束语句\n|  |                               |\n|  └---------------------------------- 文件结束表达式\n└----------------------------------┘\n```\n至此，`代码` 与 `文档结构` 的关系已经了解清楚；接下来，我们可以开始构建 `语法树` 了。\n\n### 语法树 - 平面形式\n根据代码示例，我们可以构建以下**平面形式**的 `语法树`：\n```txt\n                          全局语句块\n                              |\n  ┌-------------┬-------------┼------------------------┬---------┐\n  |             |             |                        |         |\n文件起始语句   其他语句       var 语句：'var a = 1;'     其他语句   文件结束语句\n  |                           |                                  |\n文件结束表达式               var 表达式：'var a = 1'              文件结束表达式\n                              |\n                  ┌-----------┴-----------┐\n                  |                       |\n              var 关键字：'var'     二元运算表达式：'a = 1'\n                                          |\n                         ┌----------------┼----------------┐\n                         |                |                |\n                    标识符表达式：'a'   二元运算符：'='   字面量表达式：'1' \n```\n\n### 语法树 - XML 形式\n根据代码示例，我们也可以构建以下**XML 形式**的 `语法树`：\n```html\n<全局语句块>\n\t<文件起始语句>\n\t\t<文件起始表达式 />\n\t</文件起始语句>\n\t\x3c!-- 其他语句 --\x3e\n\t<var语句>\n\t\t<var表达式>\n\t\t\tvar\n\t\t\t<二元表达式>\n\t\t\t\t<标识符表达式>a</标识符表达式>\n\t\t\t\t=\n\t\t\t\t<字面量表达式>1</字面量表达式>\n\t\t\t</二元表达式>\n\t\t</var表达式>\n\t</var语句>\n\t\x3c!-- 其他语句 --\x3e\n\t<文件结束语句>\n\t\t<文件结束表达式 />\n\t</文件结束语句>\n</全局语句块>\n```\n\n### 语法树 - 解析实例形式\n根据代码示例，我们还可以使用 `解析编译器` 进行实际代码解析，以查看其语法树实例（以下是以 `Rexjs` 为例）：\n```demo\nimport(resultDemo);\n```\n\n### 语法树成员\n从 `Rexjs` 编译器核心机制中，主要区分为以下几大类成员：\n* 语句块\n* 语句\n* 表达式\n* 语法标签\n\n以上成员，我们有个更专业名词来统称之 - `语法元素`。\n\n### 更多内容\n* [解析机制](#/rexjs/mechanism)\n* [Statements](#/rexjs/statements)\n* [Statement](#/rexjs/statement)\n* [Expression](#/rexjs/expression)\n* [SyntaxTag](#/rexjs/syntax-tag)"}}]);