(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{174:function(e,n,t){"use strict";t.d(n,"a",(function(){return s})),t.d(n,"b",(function(){return i}));var r=t(0),a=t.n(r),o=t(172),s=function(e,n,t,r){void 0===n&&(n=!1),void 0===t&&(t=window);for(var a=[],o=0,s=Object.getOwnPropertyNames(t).sort();o<s.length;o++){var i=s[o],c=t[i],m=(c||{}).prototype;switch(!0){case"function"!=typeof c:case!m:case!(m instanceof e):continue}(Object.getPrototypeOf(m)===e.prototype?!n:n)&&(a.push(m),r&&r(i,m))}return a},i=function(e,n,t){void 0===n&&(n=!1);var r=[];return s(e,n,t,(function(e,n){r.push(a.a.createElement(o.Inspector,{key:e,name:e,value:n}))})),r}},417:function(e,n,t){"use strict";t.r(n),t.d(n,"watcherDemo",(function(){return u})),t.d(n,"typesDemo",(function(){return p}));var r=t(0),a=t.n(r),o=t(176),s=t(174),i=t(172),c=function(){for(var e=0,n=0,t=arguments.length;n<t;n++)e+=arguments[n].length;var r=Array(e),a=0;for(n=0;n<t;n++)for(var o=arguments[n],s=0,i=o.length;s<i;s++,a++)r[a]=o[s];return r};var m=t(74),u=new m.a([],(function(){return a.a.createElement("div",null,a.a.createElement(i.Inspector,{name:"Rexjs.Statements",value:o.a.Statements.prototype}))})),p=new m.a([],(function(){return a.a.createElement("div",null,a.a.createElement(i.Inspector,{name:"all",value:c(Object(s.a)(o.a.Statements,!1,o.a),Object(s.a)(o.a.Statements,!0,o.a))}))}),!1,!0);n.default="### 描述\n`Statements` - `语句块`，又称 “语句列表”、 “语句集合” 等，可拥有作用域等特性。一个 `语句块` 可以包含一个或多个 `语句`。\n\n### 观察\n```inline-demo\nimport(watcherDemo);\n```\n\n### 静态属性\n* `SCOPE_GLOBAL`: number - 全局作用域，默认作用域。\n* `SCOPE_BLOCK`: number - 块级作用域，一般用于块级（大括号）语句块。\n* `SCOPE_CLOSURE`: number - 闭包作用域，一般用于函数主体语句块。\n* `SCOPE_LAZY`: number - 惰性闭包作用域，“继承” 至 `SCOPE_CLOSURE`，一般用于特殊的闭包处理使用。如：箭头函数主体闭包，因为箭头函数主体内部不能使用 `target`，具有局限性，所以我们将其闭包称之为惰性闭包作用域，即 `SCOPE_LAZY`。\n\n### 属性\n* `join`: *string* - 语句分隔符，默认值 `';'`，当提取列表中的语句时，用于两两语句拼接时的连接符，类似 `[].join(\";\")`。\n* `length`: *number* - 列表长度，默认值 `0`，标志着语句的个数。\n* `min`: *number* - 提取语句时，默认值 `0`，决定从第几个语句开始提取。\n* `reference`: *string* - 所绑定的引用对象，默认值 `'this'`。\n* `scope`: *number* - 作用域，默认值 `Rexjs.Statements.SCOPE_GLOBAL`。\n* `statement`: *Rexjs.Statement* - 当前语句。\n* `target`：*Rexjs.Statements* - 目标语句块，用于记录外层语句块。\n\n### 方法\n* `clear()`: *void* - 清空语句块。\n* `extractTo()`: *void* - 提取文本内容。\n* `initStatement()`: *Rexjs.Statement* - 初始化语句。\n* `newStatement()`: *Rexjs.Statement* - 创建新语句。\n* `splice()`: *Rexjs.Statement[]* - Array.prototype.splice。\n\n### Rexjs 中的语句块\n```inline-demo\nimport(typesDemo);\n```\n\n### 更多内容\n* [Statement](#/rexjs/statement)\n* [Expression](#/rexjs/expression)\n* [SyntaxTag](#/rexjs/syntax-tag)"}}]);