(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{426:function(n,e,a){"use strict";a.r(e),a.d(e,"watcherDemo",(function(){return l}));var t=a(0),o=a.n(t),E=a(172),r=a(176),T=a.n(r);var l=new(a(74).a)([],(function(){return o.a.createElement("div",null,o.a.createElement(E.Inspector,{name:"Rexjs.TagType",value:T.a.TagType.prototype}))}));e.default="### 描述\n`TagType` - `标签正则捕获类型`，当正则匹配时候，会依据该类型进行判断，决定是否进入标签访问器或者进入异常处理。\n\n### 观察\n```inline-demo\nimport(watcherDemo);\n```\n\n### 静态属性\n* `TYPE_NONE`: *number* - 无标签类型。\n* `TYPE_MATCHABLE`: *number* - 可匹配的标签类型。\n* `TYPE_UNEXPECTED`: *number* - 未捕获的标签类型。\n* `TYPE_MISTAKABLE`: *number* - 可能会无解的标签类型，“继承”至 `TYPE_UNEXPECTED`。\n* `TYPE_ILLEGAL`: *number* - 非法标签类型，“继承”至 `TYPE_UNEXPECTED`。\n\n### 属性\n* `illegal`: *boolean* - 是否为非法标签类型。\n* `matchable`: *boolean* - 是否为可匹配的标签类型。\n* `mistakable`: *boolean* - 是否为可能会无解的标签类型。\n* `unexpected`: *boolean* - 是否为未捕获的标签类型。\n\n### 更多内容\n* [SyntaxTag](#/rexjs/syntax-tag)"}}]);