(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{210:function(e,n,t){"use strict";t.d(n,"a",(function(){return r}));var r=function(e,n,t){if(this.name=e,this.source=n,!t){var r=/\.([^/\\.]+?)(?=(?:[?#].*)?$)/.exec(this.name);t=r?r[1]:""}this.type=t}},361:function(e,n,t){"use strict";t.r(n),t.d(n,"usageDemo",(function(){return s}));var r=t(98),o=t(210),a=t(0),p=t.n(a),i=t(99);var s=new r.a([new o.a("index.jsx","import React from 'react';\nimport { PropertyValue } from 'mic-inspector';\n\nexport function UsageDemo() {\n  return (\n    <div>\n      <PropertyValue>This is a super component of other type values</PropertyValue>\n    </div>\n  );\n}")],(function(){return p.a.createElement("div",null,p.a.createElement(i.PropertyValue,null,"This is a super component of other type values"))}),!1,!0);n.default="### Description\nObject property value inspector.\n\n### Usage\n```jsx\nimport { PropertyValue } from 'mic-inspector';\n\n<PropertyValue>This is a super component of other type values</PropertyValue>;\n```\n\n### Demo\n```demo\nimport(usageDemo);\n```\n\n### Props\n* **value** · *required* - Any type data that you want to inspect.\n* **...props** · *extends* - HTMLProps&lt;HTMLSpanElement&gt;"}}]);
//# sourceMappingURL=13.boundle.js.map