{"version":3,"sources":["webpack:///./src/components/code-previewer/file.ts","webpack:///./demos/hooks/use-has-changed.js?3d5e","webpack:///./demos/hooks/index.ts","webpack:///./demos/hooks/use-update-times.js?6132","webpack:///./demos/hooks/use-update-times.js","webpack:///./demos/react/hooks/use-state/readme.md","webpack:///./demos/hooks/use-has-changed.js","webpack:///./demos/react/hooks/use-state/interface-demo","webpack:///./demos/react/hooks/use-state/index.ts","webpack:///./demos/react/hooks/use-state/interface-demo/index.d.ts","webpack:///./demos/react/hooks/use-state/call-set-state-demo/index.jsx?fb47","webpack:///./demos/react/hooks/use-state/call-set-state-demo/index.jsx","webpack:///./demos/react/hooks/use-state/compare-setter-demo/index.jsx?fc36","webpack:///./demos/react/hooks/use-state/compare-setter-demo/index.jsx","webpack:///./demos/react/hooks/use-state/ineffective-call-demo/index.jsx?8b5b","webpack:///./demos/react/hooks/use-state/ineffective-call-demo/index.jsx"],"names":["name","source","type","this","result","exec","fileOfUseHasChanged","fileOfUseUpdateTimes","ref","current","Math","random","value","interfaceDemo","callSetStateDemo","num","setNum","onClick","compareSetterDemo","numHasChanged","setNumHasChanged","ineffectiveCallDemo","a","b","obj","setObj","times","JSON","stringify"],"mappings":"0FAAA,wCAOE,SAAYA,EAAcC,EAAgBC,GAIxC,GAHAC,KAAKH,KAAOA,EACZG,KAAKF,OAASA,GAETC,EAAM,CACT,IAAME,EAAS,gCAAgCC,KAAKF,KAAKH,MAEzDE,EAAOE,EAASA,EAAO,GAAK,GAG9BD,KAAKD,KAAOA,I,iCCjBD,wO,2HCIFI,EAAsB,IAAI,IAAK,qBAAsB,KAErDC,EAAuB,IAAI,IAAK,sBCN9B,4d,iCCAf,WAEe,eACb,IAAMC,EAAM,iBAAO,GAgBnB,OAJA,qBAAU,WACRA,EAAIC,YACH,CAACC,KAAKC,WAEFH,EAAIC,U,6OCnBE,I,8DCEA,WAACG,GACd,IAAMJ,EAAM,iBAAOI,GAEbR,EAASI,EAAIC,UAAYG,EAK/B,OAFAJ,EAAIC,QAAUG,EAEPR,G,qOCVM,ICcFS,EAAgB,IAAI,IAC/B,CACE,IAAI,IAAK,aDhBE,gNCgB+B,MAC1C,IAAI,IAAK,aCjBE,mbDiB+B,QAIjCC,EAAmB,IAAI,IAClC,CACE,IAAI,IAAK,YEvBE,6WCGR,WACC,MAAgB,mBAAS,GAAxBC,EAAG,KAAEC,EAAM,KAMlB,OACE,6BACE,qC,MAAoBD,EACpB,6BACA,kBAAC,IAAM,CAACE,QARI,WACdD,EAAOD,EAAM,KAOa,uBHcjBG,EAAoB,IAAI,IACnC,CACE,IAAI,IAAK,YI9BE,kpBJ+BX,IAAI,IAAK,qBAAsB,KAC/B,MK5BG,WACC,MAAgB,mBAAS,GAAxBH,EAAG,KAAEC,EAAM,KACZG,EAAgB,EAAcJ,GAC9BK,EAAmB,EAAcJ,GAMvC,OACE,6BACE,qC,MAAoBD,EACpB,6BACA,qC,WAAyB,GAAGI,EAC5B,6BACA,wC,WAA4B,GAAGC,EAC/B,6BACA,kBAAC,IAAM,CAACH,QAZI,WACdD,EAAOD,EAAM,KAWa,uBLgBjBM,EAAsB,IAAI,IACrC,CACE,IAAI,IAAK,YMvCE,68DNwCX,MOpCG,WACC,MAAgB,mBAAS,GAAxBN,EAAG,KAAEC,EAAM,KACZ,EAAgB,mBAAS,CAAEM,EAAG,EAAGC,EAAG,IAAnCC,EAAG,KAAEC,EAAM,KACZC,EAAQ,cA2Bd,OACE,6B,UACUA,EACR,6BACA,oC,wDAEE,yCACA,qC,KAAmBX,EACnB,6BACA,kBAAC,IAAM,CAACE,QAlCW,WACvBD,EAAOD,K,cAkCU,0CAEb,6BACA,kBAAC,IAAM,CAACE,QAlCiB,WAC7BD,EAAOD,EAAM,KAiC8B,oBAEzC,6BACA,oC,gDAEE,yCACA,qC,KAAmBY,KAAKC,UAAUJ,GAClC,6BACA,kBAAC,IAAM,CAACP,QAtCW,WACvBO,EAAIE,GAASA,EACbD,EAAOD,K,mCAqCmC,0CAEtC,6BACA,kBAAC,IAAM,CAACP,QArCiB,WAC7BO,EAAIE,GAASA,EACbD,EAAO,EAAD,GAAKD,M,+BAmCmE,W,MAE5E,6BACA,oC,+CAEE,yCACA,qC,KAAmBT,EACnB,6BACA,kBAAC,IAAM,CAACE,QAxCsB,WAClCD,EAAOD,EAAM,GACbC,EAAOD,EAAM,GACbC,EAAOD,EAAM,GACbC,EAAOD,K,gCAqCgC,+CPvB5B,UH7CA","file":"js/4.boundle.js","sourcesContent":["export class File {\n  name: string;\n\n  source: string;\n\n  type: string;\n  \n  constructor(name: string, source: string, type?: string) {\n    this.name = name;\n    this.source = source;\n\n    if (!type) {\n      const result = /\\.([^/\\\\.]+?)(?=(?:[?#].*)?$)/.exec(this.name);\n\n      type = result ? result[1] : '';\n    }\n\n    this.type = type;\n  }\n}","export default \"import { useRef } from 'react';\\n\\nexport default (value) => {\\n  const ref = useRef(value);\\n  // 进行对比，记录对比结果\\n  const result = ref.current !== value;\\n\\n  // 记录当前值\\n  ref.current = value;\\n  // 返回对比结果\\n  return result;\\n};\";","import { File } from '@/src/components/code-previewer/file';\nimport useHasChangedSource from './use-has-changed?txt';\nimport useUpdateTimesSource from './use-update-times?txt';\n\nexport const fileOfUseHasChanged = new File('use-has-changed.js', useHasChangedSource);\n\nexport const fileOfUseUpdateTimes = new File('use-update-times.js', useUpdateTimesSource);","export default \"import { useRef, useEffect } from 'react';\\n\\nexport default () => {\\n  const ref = useRef(1);\\n\\n  /**\\n   * 不能直接使用 return ++ref.current，\\n   * 因为在某些情况下，进了渲染函数，不代表组件会被更新，比如：\\n   * const [num, setNum] = useState(0);\\n   * ...\\n   * setNum(1); setNum(2); setNum(0);\\n   * 连续的 setNum，最后 num 还是等于 0，并未变化，\\n   * 这会导致进入组件的渲染函数，但其实组件不会被更新。\\n   * 所以，利用 useEffect 才能表明组件是否被更新。\\n   */\\n  useEffect(() => {\\n    ref.current++;\\n  }, [Math.random()]);\\n  \\n  return ref.current;\\n};\";","import { useRef, useEffect } from 'react';\n\nexport default () => {\n  const ref = useRef(1);\n\n  /**\n   * 不能直接使用 return ++ref.current，\n   * 因为在某些情况下，进了渲染函数，不代表组件会被更新，比如：\n   * const [num, setNum] = useState(0);\n   * ...\n   * setNum(1); setNum(2); setNum(0);\n   * 连续的 setNum，最后 num 还是等于 0，并未变化，\n   * 这会导致进入组件的渲染函数，但其实组件不会被更新。\n   * 所以，利用 useEffect 才能表明组件是否被更新。\n   */\n  useEffect(() => {\n    ref.current++;\n  }, [Math.random()]);\n  \n  return ref.current;\n};","export default \"### 描述\\n`useState` 将会根据参数 `initialState` 来返回一个记忆化版本的状态值和一个更新该状态值的函数。\\n\\n### 文档释义\\n```demo\\nimport(interfaceDemo);\\n```\\n\\n### 基础调用\\n```js\\nconst [state, setState] = useState(initialState);\\nconst [num, setNum] = useState(0);\\nconst [str, setStr] = useState('123');\\nconst [anchor, setAnchor] = useState<HTMLButtonElement>();\\n```\\n\\n### 更新机制\\n调用其 `更新函数`，可对 `状态值` 进行更新。\\n```demo\\nimport(callSetStateDemo);\\n```\\n\\n### 更新函数的唯一性\\n`更新函数` 具有唯一性，其自身不受更新机制而变化，所以不必将其纳入其他 `hooks` 的 `deps` 范围中。\\n```demo\\nimport(compareSetterDemo);\\n```\\n\\n### 无效的调用\\n`值类型` 或 `引用类型` 的状态值，只要设置的 `新值` 与 `旧值` 一致，那么便不会触发更新。\\n```demo\\nimport(ineffectiveCallDemo);\\n```\";","import { useRef } from 'react';\n\nexport default (value) => {\n  const ref = useRef(value);\n  // 进行对比，记录对比结果\n  const result = ref.current !== value;\n\n  // 记录当前值\n  ref.current = value;\n  // 返回对比结果\n  return result;\n};","export default \"/**\\n * useState 返回一个状态值和一个更新该状态值的函数。\\n * @param {unknown} initialState 该状态值的初始值（该参数在代码同一位置，仅首次有效）。\\n * @returns {[unknown, Function]} 一个状态值和一个更新该状态值的函数\\n */\\nfunction useState(initialState = undefined) {}\";","import markdown from './readme.md';\nimport CallSetStateDemoSource from './call-set-state-demo?txt';\nimport CompareSetterDemoSource from './compare-setter-demo?txt';\nimport useHasChangedSource from '@/demos/hooks/use-has-changed?txt';\nimport ineffectiveCallSource from './ineffective-call-demo?txt';\nimport { Demo } from '@/src/components/code-previewer/demo';\nimport { CallSetStateDemo } from './call-set-state-demo';\nimport { File } from '@/src/components/code-previewer/file';\nimport { CompareSetterDemo } from './compare-setter-demo';\nimport { fileOfUseHasChanged, fileOfUseUpdateTimes } from '@/demos/hooks';\nimport { IneffectiveCallDemo } from './ineffective-call-demo';\nimport interfaceJsSource from './interface-demo/index?txt';\nimport interfaceTsSource from './interface-demo/index.d?txt';\n\nexport const interfaceDemo = new Demo(\n  [\n    new File('JavaScript', interfaceJsSource, 'js'),\n    new File('TypeScript', interfaceTsSource, 'ts'),\n  ]\n);\n\nexport const callSetStateDemo = new Demo(\n  [\n    new File('index.jsx', CallSetStateDemoSource),\n  ],\n  CallSetStateDemo\n);\n\nexport const compareSetterDemo = new Demo(\n  [\n    new File('index.jsx', CompareSetterDemoSource),\n    new File('use-has-changed.js', useHasChangedSource),\n    fileOfUseHasChanged,\n  ],\n  CompareSetterDemo\n);\n\nexport const ineffectiveCallDemo = new Demo(\n  [\n    new File('index.jsx', ineffectiveCallSource),\n    fileOfUseUpdateTimes,\n  ],\n  IneffectiveCallDemo\n);\n\nexport default markdown;","export default \"interface useState {\\n  /**\\n   * useState 返回一个状态值和一个更新该状态值的函数。\\n   * @param initialState 该状态值的初始值（该参数在代码同一位置，仅首次有效）。\\n   * @returns 一个状态值和一个更新该状态值的函数\\n   */\\n  <S>(initialState: S | (() => S)): [S, React.Dispatch<React.SetStateAction<S>>];\\n\\n  /**\\n   * useState 返回一个状态值和一个更新该状态值的函数。（重载 - 无参数形式）\\n   * @returns 一个状态值和一个更新该状态值的函数\\n   */\\n  <S = undefined>(): [S | undefined, React.Dispatch<React.SetStateAction<S | undefined>>];\\n}\";","export default \"import React, { useState } from 'react';\\nimport { Button } from 'antd';\\n\\nexport function CallSetStateDemo() {\\n  const [num, setNum] = useState(0);\\n  \\n  const onClick = () => {\\n    setNum(num + 1);\\n  };\\n\\n  return (\\n    <div>\\n      <span>num</span> = {num}\\n      <hr />\\n      <Button onClick={onClick}>setNum(num + 1)</Button>\\n    </div>\\n  );\\n}\";","import React, { useState } from 'react';\nimport { Button } from 'antd';\n\nexport function CallSetStateDemo() {\n  const [num, setNum] = useState(0);\n  \n  const onClick = () => {\n    setNum(num + 1);\n  };\n\n  return (\n    <div>\n      <span>num</span> = {num}\n      <hr />\n      <Button onClick={onClick}>setNum(num + 1)</Button>\n    </div>\n  );\n}","export default \"import React, { useState } from 'react';\\nimport useHasChanged from '@/demos/hooks/use-has-changed';\\nimport { Button } from 'antd';\\n\\nexport function CompareSetterDemo() {\\n  const [num, setNum] = useState(0);\\n  const numHasChanged = useHasChanged(num);\\n  const setNumHasChanged = useHasChanged(setNum);\\n  \\n  const onClick = () => {\\n    setNum(num + 1);\\n  };\\n\\n  return (\\n    <div>\\n      <span>num</span> = {num}\\n      <br />\\n      <span>num</span> 是否有变化: {`${numHasChanged}`}\\n      <br />\\n      <span>setNum</span> 是否有变化: {`${setNumHasChanged}`}\\n      <hr />\\n      <Button onClick={onClick}>setNum(num + 1)</Button>\\n    </div>\\n  );\\n}\";","import React, { useState } from 'react';\nimport useHasChanged from '@/demos/hooks/use-has-changed';\nimport { Button } from 'antd';\n\nexport function CompareSetterDemo() {\n  const [num, setNum] = useState(0);\n  const numHasChanged = useHasChanged(num);\n  const setNumHasChanged = useHasChanged(setNum);\n  \n  const onClick = () => {\n    setNum(num + 1);\n  };\n\n  return (\n    <div>\n      <span>num</span> = {num}\n      <br />\n      <span>num</span> 是否有变化: {`${numHasChanged}`}\n      <br />\n      <span>setNum</span> 是否有变化: {`${setNumHasChanged}`}\n      <hr />\n      <Button onClick={onClick}>setNum(num + 1)</Button>\n    </div>\n  );\n}","export default \"import React, { useState } from 'react';\\nimport useUpdateTimes from '@/demos/hooks/use-update-times';\\nimport { Button } from 'antd';\\n\\nexport function IneffectiveCallDemo() {\\n  const [num, setNum] = useState(0);\\n  const [obj, setObj] = useState({ a: 1, b: 2 });\\n  const times = useUpdateTimes();\\n\\n  const onNumButtonClick = () => {\\n    setNum(num);\\n  };\\n\\n  const onChangeNumButtonClick = () => {\\n    setNum(num + 1);\\n  };\\n\\n  const onObjButtonClick = () => {\\n    obj[times] = times;\\n    setObj(obj);\\n  };\\n\\n  const onChangeObjButtonClick = () => {\\n    obj[times] = times;\\n    setObj({...obj});\\n  };\\n\\n  const onMultiChangeNumButtonClick = () => {\\n    setNum(num + 1);\\n    setNum(num + 2);\\n    setNum(num + 3);\\n    setNum(num);\\n  };\\n\\n  return (\\n    <div>\\n      组件更新次数：{times}\\n      <hr />\\n      <blockquote>\\n        值类型数据测试，同理适用于 string、boolean、number、null、undefined 等。\\n        <hr data-mini />\\n        <span>num</span>: {num}\\n        <br />\\n        <Button onClick={onNumButtonClick}>\\n          setNum(num)<sub>不会触发组件刷新</sub>\\n        </Button>\\n        <br />\\n        <Button onClick={onChangeNumButtonClick}>setNum(num + 1)</Button>\\n      </blockquote>\\n      <hr />\\n      <blockquote>\\n        引用类型数据测试，同理适用于 object、function、Array、Symbo 等。\\n        <hr data-mini />\\n        <span>obj</span>: {JSON.stringify(obj)}\\n        <br />\\n        <Button onClick={onObjButtonClick}>\\n          obj[times] = times &amp; setObj(obj)<sub>不会触发组件刷新</sub>\\n        </Button>\\n        <br />\\n        <Button onClick={onChangeObjButtonClick}>obj[times] = times &amp; setObj({'{...obj}'})</Button>\\n      </blockquote>\\n      <hr />\\n      <blockquote>\\n        同一阶段，多次调用，以最后一个“新值”为准，并与“旧值”对比，如果一致，则不会触发更新。\\n        <hr data-mini />\\n        <span>num</span>: {num}\\n        <br />\\n        <Button onClick={onMultiChangeNumButtonClick}>\\n          setNum(num + n) &amp; setNum(num)<sub>不会触发组件刷新</sub>\\n        </Button>\\n      </blockquote>\\n    </div>\\n  );\\n}\";","import React, { useState } from 'react';\nimport useUpdateTimes from '@/demos/hooks/use-update-times';\nimport { Button } from 'antd';\n\nexport function IneffectiveCallDemo() {\n  const [num, setNum] = useState(0);\n  const [obj, setObj] = useState({ a: 1, b: 2 });\n  const times = useUpdateTimes();\n\n  const onNumButtonClick = () => {\n    setNum(num);\n  };\n\n  const onChangeNumButtonClick = () => {\n    setNum(num + 1);\n  };\n\n  const onObjButtonClick = () => {\n    obj[times] = times;\n    setObj(obj);\n  };\n\n  const onChangeObjButtonClick = () => {\n    obj[times] = times;\n    setObj({...obj});\n  };\n\n  const onMultiChangeNumButtonClick = () => {\n    setNum(num + 1);\n    setNum(num + 2);\n    setNum(num + 3);\n    setNum(num);\n  };\n\n  return (\n    <div>\n      组件更新次数：{times}\n      <hr />\n      <blockquote>\n        值类型数据测试，同理适用于 string、boolean、number、null、undefined 等。\n        <hr data-mini />\n        <span>num</span>: {num}\n        <br />\n        <Button onClick={onNumButtonClick}>\n          setNum(num)<sub>不会触发组件刷新</sub>\n        </Button>\n        <br />\n        <Button onClick={onChangeNumButtonClick}>setNum(num + 1)</Button>\n      </blockquote>\n      <hr />\n      <blockquote>\n        引用类型数据测试，同理适用于 object、function、Array、Symbo 等。\n        <hr data-mini />\n        <span>obj</span>: {JSON.stringify(obj)}\n        <br />\n        <Button onClick={onObjButtonClick}>\n          obj[times] = times &amp; setObj(obj)<sub>不会触发组件刷新</sub>\n        </Button>\n        <br />\n        <Button onClick={onChangeObjButtonClick}>obj[times] = times &amp; setObj({'{...obj}'})</Button>\n      </blockquote>\n      <hr />\n      <blockquote>\n        同一阶段，多次调用，以最后一个“新值”为准，并与“旧值”对比，如果一致，则不会触发更新。\n        <hr data-mini />\n        <span>num</span>: {num}\n        <br />\n        <Button onClick={onMultiChangeNumButtonClick}>\n          setNum(num + n) &amp; setNum(num)<sub>不会触发组件刷新</sub>\n        </Button>\n      </blockquote>\n    </div>\n  );\n}"],"sourceRoot":""}