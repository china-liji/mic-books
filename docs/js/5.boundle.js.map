{"version":3,"sources":["webpack:///./src/components/code-previewer/file.ts","webpack:///./demos/hooks/use-has-changed.js?3d5e","webpack:///./demos/hooks/index.ts","webpack:///./demos/hooks/use-update-times.js?6132","webpack:///./demos/react/hooks/use-ref/readme.md","webpack:///./demos/react/hooks/use-ref/index.ts","webpack:///./demos/react/hooks/use-ref/interface-demo","webpack:///./demos/react/hooks/use-ref/interface-demo/index.d.ts"],"names":["name","source","type","this","result","exec","fileOfUseHasChanged","fileOfUseUpdateTimes","interfaceDemo","useHasChangedDemo"],"mappings":"0FAAA,wCAOE,SAAYA,EAAcC,EAAgBC,GAIxC,GAHAC,KAAKH,KAAOA,EACZG,KAAKF,OAASA,GAETC,EAAM,CACT,IAAME,EAAS,gCAAgCC,KAAKF,KAAKH,MAEzDE,EAAOE,EAASA,EAAO,GAAK,GAG9BD,KAAKD,KAAOA,I,iCCjBD,wO,2HCIFI,EAAsB,IAAI,IAAK,qBAAsB,KAErDC,EAAuB,IAAI,IAAK,sBCN9B,4d,wICAA,I,0BCOFC,EAAgB,IAAI,IAC/B,CACE,IAAI,IAAK,aCTE,oMDS+B,MAC1C,IAAI,IAAK,aEVE,2kBFU+B,QAIjCC,EAAoB,IAAI,IACnC,CAAC,MAGY,UDlBA","file":"js/5.boundle.js","sourcesContent":["export class File {\n  name: string;\n\n  source: string;\n\n  type: string;\n  \n  constructor(name: string, source: string, type?: string) {\n    this.name = name;\n    this.source = source;\n\n    if (!type) {\n      const result = /\\.([^/\\\\.]+?)(?=(?:[?#].*)?$)/.exec(this.name);\n\n      type = result ? result[1] : '';\n    }\n\n    this.type = type;\n  }\n}","export default \"import { useRef } from 'react';\\n\\nexport default (value) => {\\n  const ref = useRef(value);\\n  // 进行对比，记录对比结果\\n  const result = ref.current !== value;\\n\\n  // 记录当前值\\n  ref.current = value;\\n  // 返回对比结果\\n  return result;\\n};\";","import { File } from '@/src/components/code-previewer/file';\nimport useHasChangedSource from './use-has-changed?txt';\nimport useUpdateTimesSource from './use-update-times?txt';\n\nexport const fileOfUseHasChanged = new File('use-has-changed.js', useHasChangedSource);\n\nexport const fileOfUseUpdateTimes = new File('use-update-times.js', useUpdateTimesSource);","export default \"import { useRef, useEffect } from 'react';\\n\\nexport default () => {\\n  const ref = useRef(1);\\n\\n  /**\\n   * 不能直接使用 return ++ref.current，\\n   * 因为在某些情况下，进了渲染函数，不代表组件会被更新，比如：\\n   * const [num, setNum] = useState(0);\\n   * ...\\n   * setNum(1); setNum(2); setNum(0);\\n   * 连续的 setNum，最后 num 还是等于 0，并未变化，\\n   * 这会导致进入组件的渲染函数，但其实组件不会被更新。\\n   * 所以，利用 useEffect 才能表明组件是否被更新。\\n   */\\n  useEffect(() => {\\n    ref.current++;\\n  }, [Math.random()]);\\n  \\n  return ref.current;\\n};\";","export default \"### 描述\\n`useRef` 返回一个可变引用对象，其 `.current` 属性初始化为传递的参数 - `initialValue`。返回的对象将被记忆化，在组件的整个生命周期内保持不变。值得注意的是，`useRef()` 不仅对 `ref` 属性有用，还能很方便地将任何可变值保持在对应引用的位置。\\n\\n### 文档释义\\n```demo\\nimport(interfaceDemo);\\n```\\n\\n### 基础调用\\n```jsx\\nconst numRef = useRef(1);\\nnumRef.current++;\\n\\nconst strRef = useRef('abc');\\nstrRef.current += 'd';\\n\\nconst arrRef = useRef([]);\\narrRef.current.push('你好，中国');\\n\\nconst divRef = useRef(null);\\n<div ref={divRef} />;\\n\\nconst buttonRef = useRef();\\n<button ref={buttonRef} />;\\n```\\n\\n### 示例\\n该 `useRef` 实例是我们文档中较多引用到的自编 `hooks` 之一 - `useHasChanged`，用于判断某个值是否有变化。\\n```demo\\nimport(useHasChangedDemo);\\n```\";","import markdown from './readme.md';\nimport { Demo } from '@/src/components/code-previewer/demo';\nimport { fileOfUseHasChanged } from '@/demos/hooks';\nimport interfaceJsSource from './interface-demo/index?txt';\nimport interfaceTsSource from './interface-demo/index.d?txt';\nimport { File } from '@/src/components/code-previewer/file';\n\nexport const interfaceDemo = new Demo(\n  [\n    new File('JavaScript', interfaceJsSource, 'js'),\n    new File('TypeScript', interfaceTsSource, 'ts'),\n  ]\n);\n\nexport const useHasChangedDemo = new Demo(\n  [fileOfUseHasChanged]\n);\n\nexport default markdown;","export default \"/**\\n * useRef 返回一个可变引用对象。\\n * @param {unknown} initialValue 其 .current 属性的初始值（该参数在代码同一位置，仅首次有效）。\\n * @returns {React.MutableRefObject} 可变引用对象\\n */\\nfunction useRef(initialValue = undefined) {}\";","export default \"interface useRef {\\n  /**\\n   * useRef 返回一个可变引用对象。\\n   * @param initialValue 其 .current 属性的初始值（该参数在代码同一位置，仅首次有效）。\\n   * @returns 可变引用对象。\\n   */\\n  <T>(initialValue: T): React.MutableRefObject<T>;\\n\\n  /**\\n   * useRef 返回一个可变引用对象（重载 - 返回 RefObject 形式，一般适用于 ref 属性，需启用 tsconfig 的 strictNullChecks 选项）。\\n   * @param initialValue 其 .current 属性的初始值（该参数在代码同一位置，仅首次有效）。\\n   * @returns 可变引用对象。\\n   */\\n  <T>(initialValue: T | null): React.RefObject<T>;\\n\\n  /**\\n   * useRef 返回一个可变引用对象（重载 - 无参数形式）。\\n   * @returns 可变引用对象。\\n   */\\n  <T = undefined>(): React.MutableRefObject<T | undefined>;\\n}\";"],"sourceRoot":""}