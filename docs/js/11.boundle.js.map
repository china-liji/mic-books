{"version":3,"sources":["webpack:///./src/components/code-previewer/file.ts","webpack:///./demos/mic/mic-inspector/property-value/readme.md","webpack:///./demos/mic/mic-inspector/property-value/usage-demo/index.jsx?d1ad","webpack:///./demos/mic/mic-inspector/property-value/index.ts","webpack:///./demos/mic/mic-inspector/property-value/usage-demo/index.jsx"],"names":["name","source","type","this","result","exec","usageDemo"],"mappings":"2FAAA,wCAOE,SAAYA,EAAcC,EAAgBC,GAIxC,GAHAC,KAAKH,KAAOA,EACZG,KAAKF,OAASA,GAETC,EAAM,CACT,IAAME,EAAS,gCAAgCC,KAAKF,KAAKH,MAEzDE,EAAOE,EAASA,EAAO,GAAK,GAG9BD,KAAKD,KAAOA,I,kFCjBD,I,2CCAA,ICMFI,EAAY,IAAI,IAC3B,CACE,IAAI,IAAK,YDRE,kPEGR,WACL,OACE,6BACE,kBAAC,gBAAa,2DDKlB,GACA,GAGa,UFfA","file":"js/11.boundle.js","sourcesContent":["export class File {\n  name: string;\n\n  source: string;\n\n  type: string;\n  \n  constructor(name: string, source: string, type?: string) {\n    this.name = name;\n    this.source = source;\n\n    if (!type) {\n      const result = /\\.([^/\\\\.]+?)(?=(?:[?#].*)?$)/.exec(this.name);\n\n      type = result ? result[1] : '';\n    }\n\n    this.type = type;\n  }\n}","export default \"### Description\\nObject property value inspector.\\n\\n### Usage\\n```jsx\\nimport { PropertyValue } from 'mic-inspector';\\n\\n<PropertyValue>This is a super component of other type values</PropertyValue>;\\n```\\n\\n### Demo\\n```demo\\nimport(usageDemo);\\n```\\n\\n### Props\\n* **value** · *required* - Any type data that you want to inspect.\\n* **...props** · *extends* - HTMLProps&lt;HTMLSpanElement&gt;\";","export default \"import React from 'react';\\nimport { PropertyValue } from 'mic-inspector';\\n\\nexport function UsageDemo() {\\n  return (\\n    <div>\\n      <PropertyValue>This is a super component of other type values</PropertyValue>\\n    </div>\\n  );\\n}\";","import markdown from './readme.md';\nimport { Demo } from '@/src/components/code-previewer/demo';\nimport { File } from '@/src/components/code-previewer/file';\nimport { UsageDemo } from './usage-demo';\nimport usageDemoSource from './usage-demo?txt';\n\nexport const usageDemo = new Demo(\n  [\n    new File('index.jsx', usageDemoSource),\n  ],\n  UsageDemo,\n  false,\n  true\n);\n\nexport default markdown;","import React from 'react';\nimport { PropertyValue } from 'mic-inspector';\n\nexport function UsageDemo() {\n  return (\n    <div>\n      <PropertyValue>This is a super component of other type values</PropertyValue>\n    </div>\n  );\n}"],"sourceRoot":""}