(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{429:function(n,e,p){"use strict";p.r(e),p.d(e,"watcherDemo",(function(){return i}));var o=p(0),a=p.n(o),r=p(172),t=p(176);var i=new(p(74).a)([],(function(){return a.a.createElement("div",null,a.a.createElement(r.Inspector,{name:"Rexjs.MappingBuilder",value:t.a.MappingBuilder.prototype}))}));e.default="### 描述\n`ContentBuilder` - `源码映射生成器`，用来生成 `sourceMap`。\n\n### 观察\n```inline-demo\nimport(watcherDemo);\n```\n\n### 静态属性\n* `supported`: *boolean* - 是否支持生成 `sourceMap`。\n\n### 属性\n* `mappings`: *string* - 生成的 `sourceMap` 字符串。\n* `position`: *Rexjs.MappingPosition* - 源码映射生成器中所记录的位置。\n\n### 方法\n* `appendContext()`: *void* - 追加内容上下文，同时会更新 sourceMap。\n* `appendMappings`: *void* - 追加映射内容。\n* `appendSpace()`: *void* - 追加空格。\n* `appendString()`: *void* - 追加内容。\n* `complete()`: *string* - 完成生成，返回结果。\n* `newline()`: *void* - 追加新行，同时会更新 sourceMap。。\n\n### 更多内容\n* [ContentBuilder](#/rexjs/content-builder)\n* [SyntaxParser](#/rexjs/syntax-parser)"}}]);